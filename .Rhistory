5>8 || 6!=8 && 4 >3.9
isTRUE(6>4)
identical()
identical('twins','twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
info()
main()
info()
nxt()
swirl()
Sys.date()
Sys.Date()
mean(c(2,4,5))
source('/var/folders/gm/h7yh7lxx2gl04656xdc92zvm0000gn/T//RtmpTfJt79/boring_function.R')
submit()
boring_function('My first function!')
boring_function
play()
mean
stdev
sd
nxt()
submit()
my_mean(c(4,5,10))
source('/var/folders/gm/h7yh7lxx2gl04656xdc92zvm0000gn/T//RtmpTfJt79/remainder.R')
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11, num=5)
remainder(4, div=2)
args(remainder)
source('/var/folders/gm/h7yh7lxx2gl04656xdc92zvm0000gn/T//RtmpTfJt79/evaluate.R')
submit()
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){[1]}, c(8,4,0))
evaluate(function(x){1}, c(8,4,0))
evaluate(function(x){[1]}, c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
source('/var/folders/gm/h7yh7lxx2gl04656xdc92zvm0000gn/T//RtmpTfJt79/telegram.R')
submit()
telegram("Calling", "all", "doctors")
source('/var/folders/gm/h7yh7lxx2gl04656xdc92zvm0000gn/T//RtmpTfJt79/mad_libs.R')
submit()
mad_libs(Boston, brilliant, Republicans)
mad_libs("Boston", "brilliant", "Republicans")
source('/var/folders/gm/h7yh7lxx2gl04656xdc92zvm0000gn/T//RtmpTfJt79/bin_op.R')
submit()
"I" %p% "love" %p% "R!"
?lapply
?data.frame
?rbind
?na.rm
?removeNA
str(mapply)
?gl
?tapply
str(split)
?split
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
s
lapply(s, function(x), colMeans(x))
lapply(s, function(x), colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x))
lapply(s, function(x) colMeans(x), na.rm=TRUE)
LIBRARY(DATASETS)
library(datasets)
data(iris)
?iris
iris
iris3
View(iris)
?lapply
?sapply
lapply(iris, mean)
?split
split(iris, iris$Species)
lapply(iris, function(x) colMeans(x))
lapply(iris, function(x) colMeans(iris))
lapply(iris, function(x) colMeans(iris$Sepal.Length))
?apply
str(apply)
apply(iris, 1, mean)
?tapply
str(tapply)
s <- split(iris, iris$Species)
s
tapply(iris, s, mean)
lapply(s, mean)
lapply(s, function(x) colMeans(x))
lapply(s, function(x) colMeans(x["Sepal.Length"]))
lapply(s, function(x) colMeans(x[, "Sepal.Length"]))
lapply(s, function(x) colMeans(x["Sepal.Length"]))
?lapply
str(lapply)
apply(iris, 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
data(mtcars)
mtcars
view(mtcars)
View(mtcars)
?mtcars
lapply(mtcars, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
dim(tapply(mtcars$cyl, mtcars$mpg, mean))
?sapply
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
?diff
apply(split(mtcars$hp, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
diff <- sapply(split(mtcars$hp, mtcars$cyl), mean)
diff[3]-diff[1]
log(-1)
?invisitlbe
?invisible
mean(z)
traceback()
mean(x)
lm(y~x)
traceback()
debug(lm)
lm(y~x)
options(error=message)
read.csv("nofile")
1
debug(ls)
ls
?ls
exit
nn
hi
ls
debug()
stop
mean()
traceback()
x
?assignOps
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
set (3)
m
x
makeVector(5)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(5)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1:4)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(1:4)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
?numeric
cat("\014")
swirl()
library(swirl)
swirl()
exit()
play()
help
x <- 1:10
x
x <- 5
x
for(i in 1:10){
if(x[i]>5){
x[i] <- 0
}
}
x<- 1:10
for(i in 1:10){
if(x[i]>5){
x[i] <- 0
}
}
x<- 1:10
for(i in 1:10){
if(x[i]>5){
x[i] <- 0
}
}
x
swirl()
2
info()
main()
head(flags)
dim(flags)
class(flags)
play()
as.list(flags)
nxt()
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <-flags [, 11:17]
head(flag_colors)
lapply(sum, flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_colors, range)
play()
x<- NULL
?files_full
nxt()
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
play()
full_list<- list.files("specdata", full.names=TRUE)
nxt()
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$landmasses, flags$popuation, summary)
tapply(flags$landmass, flags$popuation, summary)
tapply(flags$landmass, flags$population, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?solve
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
x<- matrix(1:4)
x
x<- matrix(1:4, 2, 2)
x
solve(x)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
## Return a matrix that is the inverse of 'x'
}
cacheSolve(1:4)
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
## Return a matrix that is the inverse of 'x'
}
cacheSolve <- function(x, ...) {
m <- getinverse(x)
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
## Return a matrix that is the inverse of 'x'
}
cacheSolve(1:4)
makeCacheMatrix(1:4)
cacheSolve(x)
cacheSolve(1:4)
library(swirl)
swirl()
exit()
info()
main()
info()
main()
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, prob = c(0.3, 0.7))
sample(c(0,1), 100, replace=TRUE prob = c(0.3, 0.7))
sample(c(0,1), 100, replace=TRUE, prob = c(0.3, 0.7))
flips<- sample(c(0,1), 100, replace=TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(size=1, n=100, prob=0.7)
flips2
sum(flips2)
rnorm()
?rnorm()
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
dl <- Sys.Date()
d1 <- Sys.Date()
class(d1)
unclass(dl)
unclass(d1)
d1
as.Date("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSISlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M"")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() >t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
?library
library()
library(datasets)
datasets()
library(siwrl)
library(swirl)
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x= cars$speed, y=cars$dist)
plot(x=cars$dist, y = cars$speed)
plot(x=cars$dist, y = cars$speed, ylab = "Speed")
plot(x=cars$dist, y = cars$speed, xlab = "Speed")
plot(x=cars$speed, y = cars$dist, xlab = "Speed")
plot(x=cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2
plot(cars, pch=2)
plot(cars, pch=2)
data(mtcars)
play()
head(mtcars)
nxt()
?boxplot()
?boxplot
boxplot(mpg~ cyl)
boxplot(formula = mpg~ cyl)
boxplot(mtcars, mpg~ cyl)
boxplot(data = mtcars, formula = mpg~ cyl)
boxplot(data = mtcars, formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
